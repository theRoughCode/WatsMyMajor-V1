<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <meta charset="UTF-8">
  <title>Prerequisites</title>
  <link rel="icon" href="/public/images/favicon.ico">
  <link rel="stylesheet" type="text/css" href="../../stylesheets/style.css">
  <style>
    .node {
      cursor: pointer;
    }

    .node circle {
      fill: #fff;
      stroke: steelblue;
      stroke-width: 0.05em;
    }

    .node text {
      font: 15px sans-serif;
    }

    .link {
      fill: none;
      stroke: #ccc;
      stroke-width: 1.5px;
    }
  </style>
</head>
<body>
  <nav>
    <a href="/">Home</a>
    <a id="back" href="#">Back to Course</a>
  </nav>
  <h1></h1>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>
const screen_width = document.documentElement.clientWidth - 30;
const screen_height = document.documentElement.clientHeight;
// distance between parent and child nodes
var line_dist = 180;

var margin = {top: 10, right: 120, bottom: 10, left: 120},
    width = screen_width - margin.right - margin.left,
    height = screen_height - margin.top - margin.bottom;

var i = 0,
    duration = 750,
    root,
    tree,
    svg;

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

window.onload = function() {
  var treeData = {{{ data }}};  // triple handlebars to disable HTML encoding
  const h1 = document.querySelector('h1');
  const title = document.querySelector('title');
  const link = document.querySelector('#back');
  const subject = treeData._root.data.subject;
  const catalog_number = treeData._root.data.catalog_number;
  title.textContent = subject + " " + catalog_number + " - Prerequisites";
  h1.textContent = subject + " " + catalog_number + " - Prerequisites Tree";
  link.href = `/wat/${subject}/${catalog_number}`;
  height -= (h1.offsetTop + h1.offsetHeight);

  // set tree dimensions
  tree = d3.layout.tree()
      .size([height, width]);
  // set svg dimension
  svg = d3.select("body").append("svg")
      .attr("width", width + margin.right + margin.left)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  root = treeData._root;
  root.x0 = height / 2;
  root.y0 = 0;
  line_dist = width / root.depth;

  function collapse(d) {
    if (d.children) {
      d._children = d.children;
      d._children.forEach(collapse);
      d.children = null;
    }
  }

  root.children.forEach(collapse);
  update(root);
};

d3.select(self.frameElement).style("height", "800px");

function update(source) {
  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
      links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * line_dist; });

  // Update the nodes…
  var node = svg.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", click);

  // add child circle
  nodeEnter.append("circle").attr("r", 1e-6);

  // style text
  nodeEnter.append("text")
      .attr("x", function(d) {
        if (!d.parent) return -13;  // root node
        else if (hasChildren(d)) return 0;
        return 13;  // leaf node
      })
      .attr("dy", function(d) { return hasChildren(d) && d.parent ? "1.45em" : "0.35em"; })
      .attr("text-anchor", function(d) {
        if (!d.parent) return "end";  // root node
        else if (hasChildren(d)) return "middle";
        return "start";  // leaf node
      })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  // Change colour of node
  nodeUpdate.select("circle")
      .attr("r", 8)
      .style("fill", function(d) {
        const choose = d.data.choose;
        if (!d._children || d._children.length == 0) return "lightsteelblue";
        if (choose === null) return "#fff";  // course
        else if (choose === 0) return "#34b1ff";  // take all
        else return "#31c66f";  // choose 1
      })
      .style("stroke", function(d) {
        const choose = d.data.choose;
        if (choose === null) return "steelblue";  // course
        else if (choose === 0) return "#0048ff";  // take all
        else return "#09962c";  // choose 1
      });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = svg.selectAll("path.link")
      .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      });

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// return true if node has children
const hasChildren = d => {
  return !(!d.children && (!d._children || !d._children.length));
};

// Toggle children on click.
function click(d) {
  // has active children
  if (!hasChildren(d)) return;
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update(d);
}

</script>
